package ua.olexandr.debug {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	import flash.system.System;	import flash.utils.getTimer;	import ua.olexandr.text.Label;	import ua.olexandr.tools.display.Arranger;	import ua.olexandr.utils.DisplayUtils;		public class ResourceMonitor extends Sprite {				private const LABEL_H:Number = 18;				private const WIDTH:Number = 80;		private const HEIGHT:Number = LABEL_H * 4 + 50;						private var _colorFill:uint = 0x000000;		private var _colorFPS:uint = 0xE2E250;		private var _colorMS:uint = 0x45ED45;		private var _colorMem:uint = 0x8AC0F4;		private var _colorMemMax:uint = 0xFF7733;				private var _valueFPS:uint;		private var _valueMS:uint;		private var _valueMSPrev:uint;		private var _valueMem:Number;		private var _valueMemMax:Number;				private var _container:Sprite;		private var _labelFPS:Label;		private var _labelMS:Label;		private var _labelMem:Label;		private var _labelMemMax:Label;				private var _bmpData:BitmapData;		private var _rect:Rectangle;				/**		 * 		 */		public function ResourceMonitor():void {			addEventListener(Event.ADDED_TO_STAGE, addedHandler);			addEventListener(Event.REMOVED_FROM_STAGE, removedHandler);									_valueMemMax = 0;									graphics.beginFill(_colorFill);			graphics.drawRect(0, 0, WIDTH, HEIGHT);			graphics.endFill();						_container = new Sprite();			addChild(_container);						_labelFPS = new Label(_colorFPS, 11);			_labelFPS.autoSize = Label.AUTOSIZE_NONE;			_labelFPS.setSize(WIDTH, LABEL_H)			_container.addChild(_labelFPS);						_labelMS = new Label(_colorMS, 11);			_labelMS.autoSize = Label.AUTOSIZE_NONE;			_labelMS.setSize(WIDTH, LABEL_H);			_container.addChild(_labelMS);						_labelMem = new Label(_colorMem, 11);			_labelMem.autoSize = Label.AUTOSIZE_NONE;			_labelMem.setSize(WIDTH, LABEL_H);			_container.addChild(_labelMem);						_labelMemMax = new Label(_colorMemMax, 11);			_labelMemMax.autoSize = Label.AUTOSIZE_NONE;			_labelMemMax.setSize(WIDTH, LABEL_H);			_container.addChild(_labelMemMax);						Arranger.arrangeY(DisplayUtils.getChildren(_container), -4);						_bmpData = new BitmapData(WIDTH, 50, false, _colorFill);			addChild(new Bitmap(_bmpData));						Arranger.arrangeY(DisplayUtils.getChildren(this), 0);						_rect = new Rectangle(0, 0, 1, _bmpData.height);						mouseChildren = false;			mouseEnabled = false;		}						private function addedHandler(e:Event):void {			addEventListener(Event.ENTER_FRAME, efHandler);		}				private function removedHandler(e:Event):void {			removeEventListener(Event.ENTER_FRAME, efHandler);		}				private function efHandler(e:Event):void {			var _timer:uint = getTimer();						if (_timer - 1000 > _valueMSPrev) {				_valueMSPrev = _timer;				_valueMem = Number((System.totalMemory * .000000954).toFixed(3));				_valueMemMax = Math.max(_valueMemMax, _valueMem);								var _fpsGraph:uint = Math.min(50, (_valueFPS / stage.frameRate) * 50);				var _memGraph:uint = Math.min(50, Math.sqrt(Math.sqrt(_valueMem * 5000))) - 2;				var _memGraphMax:uint = Math.min(50, Math.sqrt(Math.sqrt(_valueMemMax * 5000))) - 2;								_labelFPS.text = 'FPS: ' + _valueFPS + ' / ' + stage.frameRate;				_labelMem.text = 'MEM: ' + _valueMem;				_labelMemMax.text = 'MAX: ' + _valueMemMax;								_bmpData.scroll(1, 0);				_bmpData.fillRect(_rect, _colorFill);				_bmpData.setPixel(0, _bmpData.height - _fpsGraph, _colorFPS);				_bmpData.setPixel(0, _bmpData.height - ((_timer - _valueMS) >> 1), _colorMS);				_bmpData.setPixel(0, _bmpData.height - _memGraph, _colorMem);				_bmpData.setPixel(0, _bmpData.height - _memGraphMax, _colorMemMax);								_valueFPS = 0;			}						_valueFPS++;						_labelMS.text = 'MS: ' + (_timer - _valueMS);			_valueMS = _timer;		}			}}